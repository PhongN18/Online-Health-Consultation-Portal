// <auto-generated />
using System;
using BackendOHCP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendOHCP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Appointment", b =>
            {
                b.Property<int>("AppointmentId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AppointmentId"));

                b.Property<DateTime>("AppointmentTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("CancelReason")
                    .HasColumnType("longtext");

                b.Property<string>("CareOption")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("DoctorId")
                    .HasColumnType("int");

                b.Property<string>("Mode")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("PatientId")
                    .HasColumnType("int");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("AppointmentId");

                b.HasIndex("PatientId");

                b.HasIndex("DoctorId", "AppointmentTime");

                b.ToTable("Appointments");
            });

            modelBuilder.Entity("BackendOHCP.Models.AIDiagnostic", b =>
            {
                b.Property<int>("DiagId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DiagId"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("DiagnosisJson")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("PatientId")
                    .HasColumnType("int");

                b.Property<string>("Source")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("SymptomText")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("DiagId");

                b.HasIndex("PatientId");

                b.ToTable("AIDiagnostics");
            });

            modelBuilder.Entity("BackendOHCP.Models.MedicalRecord", b =>
            {
                b.Property<int>("RecordId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RecordId"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .HasColumnType("longtext");

                b.Property<int?>("DoctorId")
                    .HasColumnType("int");

                b.Property<string>("FilePath")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("PatientId")
                    .HasColumnType("int");

                b.Property<string>("RecordType")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("RecordId");

                b.HasIndex("DoctorId");

                b.HasIndex("PatientId");

                b.ToTable("MedicalRecords");
            });

            modelBuilder.Entity("BackendOHCP.Models.Prescription", b =>
            {
                b.Property<int>("PrescriptionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PrescriptionId"));

                b.Property<int>("AppointmentId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("DoctorId")
                    .HasColumnType("int");

                b.Property<string>("Medications")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Notes")
                    .HasColumnType("longtext");

                b.Property<int>("PatientId")
                    .HasColumnType("int");

                b.HasKey("PrescriptionId");

                b.HasIndex("AppointmentId");

                b.HasIndex("DoctorId");

                b.HasIndex("PatientId");

                b.ToTable("Prescriptions");
            });

            modelBuilder.Entity("DoctorProfile", b =>
            {
                b.Property<int>("DoctorProfileId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DoctorProfileId"));

                b.Property<int?>("ExperienceYears")
                    .HasColumnType("int");

                b.Property<string>("Qualification")
                    .HasColumnType("longtext");

                b.Property<decimal?>("Rating")
                    .HasColumnType("decimal(65,30)");

                b.Property<string>("Specialization")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("DoctorProfileId");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("DoctorProfiles");
            });

            modelBuilder.Entity("Message", b =>
            {
                b.Property<int>("MessageId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                b.Property<int>("AppointmentId")
                    .HasColumnType("int");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<bool>("IsRead")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("ReceiverId")
                    .HasColumnType("int");

                b.Property<int>("SenderId")
                    .HasColumnType("int");

                b.Property<DateTime>("SentAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("MessageId");

                b.HasIndex("ReceiverId");

                b.HasIndex("SenderId");

                b.ToTable("Messages");
            });

            modelBuilder.Entity("User", b =>
            {
                b.Property<int>("UserId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime?>("DateOfBirth")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.Property<string>("FirstName")
                    .HasColumnType("longtext");

                b.Property<string>("Gender")
                    .HasColumnType("longtext");

                b.Property<string>("LastName")
                    .HasColumnType("longtext");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("UserId");

                b.HasIndex("Email")
                    .IsUnique();

                b.ToTable("Users");
            });

            modelBuilder.Entity("VideoSession", b =>
            {
                b.Property<int>("VideoSessionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VideoSessionId"));

                b.Property<int>("AppointmentId")
                    .HasColumnType("int");

                b.Property<DateTime?>("EndedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("RoomName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime?>("StartedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("VideoSessionId");

                b.ToTable("VideoSessions");
            });

            modelBuilder.Entity("Appointment", b =>
            {
                b.HasOne("User", "Doctor")
                    .WithMany("AppointmentsAsDoctor")
                    .HasForeignKey("DoctorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("User", "Patient")
                    .WithMany("AppointmentsAsPatient")
                    .HasForeignKey("PatientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("Patient");
            });

            modelBuilder.Entity("BackendOHCP.Models.AIDiagnostic", b =>
            {
                b.HasOne("User", "Patient")
                    .WithMany("AIDiagnostics")
                    .HasForeignKey("PatientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Patient");
            });

            modelBuilder.Entity("BackendOHCP.Models.MedicalRecord", b =>
            {
                b.HasOne("User", "Doctor")
                    .WithMany()
                    .HasForeignKey("DoctorId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("User", "Patient")
                    .WithMany("MedicalRecords")
                    .HasForeignKey("PatientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("Patient");
            });

            modelBuilder.Entity("BackendOHCP.Models.Prescription", b =>
            {
                b.HasOne("Appointment", "Appointment")
                    .WithMany()
                    .HasForeignKey("AppointmentId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("User", "Doctor")
                    .WithMany()
                    .HasForeignKey("DoctorId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("User", "Patient")
                    .WithMany()
                    .HasForeignKey("PatientId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Appointment");

                b.Navigation("Doctor");

                b.Navigation("Patient");
            });

            modelBuilder.Entity("DoctorProfile", b =>
            {
                b.HasOne("User", "User")
                    .WithOne("DoctorProfile")
                    .HasForeignKey("DoctorProfile", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("Message", b =>
            {
                b.HasOne("User", "Receiver")
                    .WithMany()
                    .HasForeignKey("ReceiverId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("User", "Sender")
                    .WithMany()
                    .HasForeignKey("SenderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Receiver");

                b.Navigation("Sender");
            });

            modelBuilder.Entity("User", b =>
            {
                b.Navigation("AIDiagnostics");

                b.Navigation("AppointmentsAsDoctor");

                b.Navigation("AppointmentsAsPatient");

                b.Navigation("DoctorProfile");

                b.Navigation("MedicalRecords");
            });
#pragma warning restore 612, 618
        }
    }
}
